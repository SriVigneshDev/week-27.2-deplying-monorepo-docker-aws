# üèóÔ∏è Build Stage - Contains all build tools and dependencies
FROM node:22-alpine AS builder

# 1Ô∏è‚É£ Accept DATABASE_URL as a build argument (passed from GitHub Actions)
ARG DATABASE_URL

# 2Ô∏è‚É£ Make DATABASE_URL available as an environment variable inside container
ENV DATABASE_URL=$DATABASE_URL

# 3Ô∏è‚É£ Set working directory inside the container
WORKDIR /usr/src/app

# 4Ô∏è‚É£ Install pnpm globally (used for monorepo installs)
RUN npm i -g pnpm

# 5Ô∏è‚É£ Copy only package management files first for optimal layer caching
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./

# 6Ô∏è‚É£ Copy only package.json files to create workspace structure
# (pnpm needs workspace structure but NOT source code for installation)
COPY packages/*/package.json ./packages/
COPY apps/web/package.json ./apps/web/

# 7Ô∏è‚É£ Install all dependencies (including devDependencies for build)
# (This layer will be cached unless dependencies change!)
RUN pnpm install --frozen-lockfile

# 8Ô∏è‚É£ Copy actual source code AFTER dependency installation
# (Changing source code won't invalidate dependency cache)
COPY packages ./packages
COPY apps/web ./apps/web

# 9Ô∏è‚É£ Generate Prisma client with correct DATABASE_URL
RUN  pnpm run generate:db

# üîü Create .env file in apps/web so Next.js can pick up DATABASE_URL during build
RUN echo "DATABASE_URL=$DATABASE_URL" > apps/web/.env


# 1Ô∏è‚É£2Ô∏è‚É£ Build only the web app using Turborepo
RUN pnpm dlx turbo build --filter=web...

# 1Ô∏è‚É£3Ô∏è‚É£ Clean up dev dependencies to reduce what gets copied to production stage
RUN pnpm prune --prod

# üöÄ Production Stage - Minimal runtime image
FROM node:22-alpine AS production

# 1Ô∏è‚É£4Ô∏è‚É£ Install runtime dependencies
RUN npm i -g pnpm && apk add --no-cache curl

# 1Ô∏è‚É£5Ô∏è‚É£ Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# 1Ô∏è‚É£6Ô∏è‚É£ Set working directory
WORKDIR /usr/src/app

# 1Ô∏è‚É£7Ô∏è‚É£ Copy built Next.js application from builder stage
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/apps/web/.next ./apps/web/.next
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/apps/web/public ./apps/web/public
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/apps/web/package.json ./apps/web/package.json
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/apps/web/.env ./apps/web/.env

# 1Ô∏è‚É£8Ô∏è‚É£ Copy necessary files for runtime
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/package.json ./package.json
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/pnpm-workspace.yaml ./pnpm-workspace.yaml

# 1Ô∏è‚É£9Ô∏è‚É£ Copy production node_modules and packages
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/packages ./packages

# 2Ô∏è‚É£0Ô∏è‚É£ Copy Prisma client and schema (needed for runtime)
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/packages/db/prisma ./packages/db/prisma

# 2Ô∏è‚É£1Ô∏è‚É£ Set runtime environment variables
ARG DATABASE_URL
ENV DATABASE_URL=$DATABASE_URL
ENV NODE_ENV=production

# 2Ô∏è‚É£2Ô∏è‚É£ Switch to non-root user
USER nextjs

# 2Ô∏è‚É£3Ô∏è‚É£ Expose port 3000 (Next.js default port)
EXPOSE 3000

# 2Ô∏è‚É£4Ô∏è‚É£ Add health check for Next.js app
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || curl -f http://localhost:3000/health || exit 1

# 2Ô∏è‚É£5Ô∏è‚É£ Start the production web app
CMD ["pnpm", "run", "start:web"]