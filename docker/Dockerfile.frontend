# 🏗️ Build Stage
FROM node:22-alpine AS builder

ARG DATABASE_URL
ENV DATABASE_URL=$DATABASE_URL

WORKDIR /app

RUN npm i -g pnpm

COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY packages/*/package.json ./packages/
COPY apps/web/package.json ./apps/web/

RUN pnpm install --frozen-lockfile

COPY packages ./packages
COPY apps/web ./apps/web

RUN pnpm run generate:db
RUN echo "DATABASE_URL=$DATABASE_URL" > apps/web/.env

# Build with standalone output
RUN pnpm dlx turbo build --filter=web...

# 🚀 Production Stage - Ultra Minimal
FROM gcr.io/distroless/nodejs22-debian12:nonroot AS production

ARG DATABASE_URL
ENV DATABASE_URL=$DATABASE_URL \
    NODE_ENV=production

WORKDIR /app

# Copy Next.js standalone output (already includes all dependencies)
COPY --from=builder --chown=nonroot:nonroot /app/apps/web/.next/standalone ./
COPY --from=builder --chown=nonroot:nonroot /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=builder --chown=nonroot:nonroot /app/apps/web/public ./apps/web/public

# Copy Prisma schema (needed for runtime)
COPY --from=builder --chown=nonroot:nonroot /app/packages/db/prisma/schema.prisma ./packages/db/prisma/schema.prisma

EXPOSE 3000

CMD ["apps/web/server.js"]