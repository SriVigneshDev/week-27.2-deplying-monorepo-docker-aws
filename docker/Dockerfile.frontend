# syntax=docker/dockerfile:1.7-labs
FROM node:22-alpine AS base

RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs && \
    corepack enable && \
    corepack prepare pnpm@9.1.0 --activate

ENV PNPM_HOME="/pnpm" PATH="$PNPM_HOME:$PATH"
WORKDIR /app

# ==============================================================================
# DEPENDENCIES
# ==============================================================================
FROM base AS dependencies

COPY --chown=nextjs:nodejs package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./

# Copy package.json from all workspace packages (preserve directory structure)
COPY --chown=nextjs:nodejs apps/web/package.json ./apps/web/package.json
COPY --chown=nextjs:nodejs packages/*/package.json ./packages/


RUN --mount=type=cache,id=pnpm,target=/pnpm/store,uid=1001,gid=1001 \
    pnpm install --frozen-lockfile --prefer-offline

# ==============================================================================
# BUILDER - NEEDS DATABASE_URL AT BUILD TIME
# ==============================================================================
FROM base AS builder

# CRITICAL: Accept DATABASE_URL as build argument
ARG DATABASE_URL
ARG NODE_ENV=production

# CRITICAL: Set as environment variable so Next.js can use it
ENV DATABASE_URL=${DATABASE_URL} \
    NODE_ENV=${NODE_ENV} \
    NEXT_TELEMETRY_DISABLED=1

# Validate DATABASE_URL is provided
RUN if [ -z "$DATABASE_URL" ]; then \
      echo "ERROR: DATABASE_URL build arg is required!"; \
      exit 1; \
    fi

COPY --from=dependencies --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=dependencies --chown=nextjs:nodejs /app/package.json ./package.json
COPY --from=dependencies --chown=nextjs:nodejs /app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=dependencies --chown=nextjs:nodejs /app/pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --from=dependencies --chown=nextjs:nodejs /app/turbo.json ./turbo.json

# Copy source code - MUST include ALL workspace packages for Turbo
COPY --chown=nextjs:nodejs packages ./packages
COPY --chown=nextjs:nodejs apps ./apps

# Generate Prisma Client (using already-installed prisma)
RUN cd packages/db && pnpm prisma generate

# Build with Turbo
RUN pnpm dlx turbo build --filter=web...

# ==============================================================================
# PRODUCTION - ALSO NEEDS DATABASE_URL AT RUNTIME
# ==============================================================================
FROM gcr.io/distroless/nodejs22-debian12:nonroot AS production

LABEL org.opencontainers.image.title="Next.js App"
LABEL maintainer="your-email@company.com"

WORKDIR /app

COPY --from=builder --chown=nonroot:nonroot /app/apps/web/.next/standalone ./
COPY --from=builder --chown=nonroot:nonroot /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=builder --chown=nonroot:nonroot /app/apps/web/public ./apps/web/public
COPY --from=builder --chown=nonroot:nonroot /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nonroot:nonroot /app/node_modules/@prisma ./node_modules/@prisma

ENV NODE_ENV=production \
    PORT=3000 \
    HOSTNAME="0.0.0.0" \
    NEXT_TELEMETRY_DISABLED=1

EXPOSE 3000

# DATABASE_URL must be passed at runtime too (for API routes, server components)
CMD ["apps/web/server.js"]