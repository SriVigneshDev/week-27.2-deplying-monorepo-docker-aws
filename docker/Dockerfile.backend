# üèóÔ∏è Build Stage
FROM node:22-alpine AS builder

WORKDIR /app

RUN npm i -g pnpm

COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY packages/*/package.json ./packages/
COPY apps/backend/package.json ./apps/backend/

RUN pnpm install --frozen-lockfile

COPY packages ./packages
COPY apps/backend ./apps/backend

RUN pnpm run generate:db
RUN pnpm dlx turbo build --filter=backend...

# Bundle into single file
RUN pnpm add -D esbuild
RUN npx esbuild apps/backend/dist/index.js \
    --bundle \
    --platform=node \
    --target=node22 \
    --outfile=apps/backend/standalone.js \
    --minify \
    --external:@prisma/client

# üöÄ Production Stage - Alpine (can debug with shell)
FROM node:22-alpine AS production

ENV NODE_ENV=production \
    PORT=8080

RUN addgroup -g 1001 nodejs && \
    adduser -u 1001 -G nodejs -s /bin/sh -D backend

WORKDIR /app

# Copy bundled app
COPY --from=builder --chown=backend:nodejs /app/apps/backend/standalone.js ./

# Copy Prisma
COPY --from=builder --chown=backend:nodejs /app/node_modules/.pnpm ./node_modules/.pnpm
COPY --from=builder --chown=backend:nodejs /app/node_modules/.modules.yaml ./node_modules/.modules.yaml
COPY --from=builder --chown=backend:nodejs /app/packages/db/prisma ./packages/db/prisma

USER backend

EXPOSE 8080

CMD ["node", "standalone.js"]